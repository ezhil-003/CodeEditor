// prisma/schema/schema.mongodb.prisma
generator client {
  provider        = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("MONGODB_URL")
}

model Project {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  ownerId     String   // Reference to the user who created the project
  description String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  files       File[]   // Associated files
  folders     Folder[] // Associated folders
  collaborators Collaborator[] // Users with access to the project

  // Relationships
  owner User @relation(fields: [ownerId], references: [id])

  @@index([ownerId])
  Change Change[]
}

model File {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  folderId    String?   @db.ObjectId
  name        String
  objectKey   String   // Reference to AWS S3/localstack object key
  size        Int
  mimeType    String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  changes     Change[] // History of changes

  // Relationships
  project Project @relation(fields: [projectId], references: [id])
  folder  Folder? @relation(fields: [folderId], references: [id])

  @@index([projectId])
  @@index([folderId])
}

model Folder {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  parentId    String?   @db.ObjectId // For nested folders
  name        String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([projectId])
  @@index([parentId])
  File File[]
  
}

model User {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  userId      String   // Reference to PostgreSQL user ID
  projects    Collaborator[] // Projects the user is associated with
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@index([userId])
  Change Change[]
  Project Project[]
}


model Collaborator {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  userId      String   @db.ObjectId
  role        String   // e.g., "owner", "editor", "viewer"
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relationships
  project Project @relation(fields: [projectId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([userId])
}

model Change {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  projectId   String   @db.ObjectId
  fileId      String?   @db.ObjectId
  userId      String   @db.ObjectId
  type        String   // e.g., "create", "update", "delete"
  details     Json     // Change-specific data
  createdAt   DateTime @default(now())

  // Relationships
  project Project @relation(fields: [projectId], references: [id])
  file    File?   @relation(fields: [fileId], references: [id])
  user    User    @relation(fields: [userId], references: [id])

  @@index([projectId])
  @@index([fileId])
  @@index([userId])
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_URL")
}

model User {
  id             String         @id @default(uuid())
  email          String         @unique
  password       String
  username       String?
  sessions       Session[]
  projects       Project[]      @relation("ProjectOwner")
  collaborations Collaborator[]
  changes        Change[]
  createdAt      DateTime       @default(now())
  updatedAt      DateTime       @updatedAt
}

model Session {
  id           String   @id @default(uuid())
  userId       String
  accessToken  String   @unique
  refreshToken String   @unique
  expiresAt    DateTime
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  user User @relation(fields: [userId], references: [id])
}

model Project {
  id            String         @id @default(uuid())
  name          String
  description   String?
  owner         User           @relation("ProjectOwner", fields: [ownerId], references: [id])
  ownerId       String
  files         File[]
  folders       Folder[]
  collaborators Collaborator[]
  changes       Change[]
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
}

model File {
  id        String   @id @default(uuid())
  name      String
  content   String
  path      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  folder    Folder?  @relation(fields: [folderId], references: [id])
  folderId  String?
  changes   Change[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Folder {
  id        String   @id @default(uuid())
  name      String
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  parent    Folder?  @relation("FolderHierarchy", fields: [parentId], references: [id])
  parentId  String?
  files     File[]
  children  Folder[] @relation("FolderHierarchy") // Opposite relation field
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index([projectId])
  @@index([parentId])
}

model Collaborator {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  role      String // 'owner', 'editor', 'viewer'
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Change {
  id        String   @id @default(uuid())
  project   Project  @relation(fields: [projectId], references: [id])
  projectId String
  file      File?    @relation(fields: [fileId], references: [id])
  fileId    String?
  user      User     @relation(fields: [userId], references: [id])
  userId    String
  type      String // 'create', 'update', 'delete'
  details   Json
  createdAt DateTime @default(now())
}
